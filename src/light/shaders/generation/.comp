#version 430 core

uniform float time;
uniform float samplingStep;
uniform ivec2 framebufferSize;
uniform mat4 projMatrix;
uniform mat4 viewMatrix;

/// Perlin tables, readonly
layout(std430, binding = 0) readonly buffer PerlinTables
{
	/// Permutation table
	int		perms[256];

	/// Corner gradients
	vec3	grads[256];
} perlinTables;

//layout(binding = 0, r32f) writeonly uniform image2D testTex;
layout(binding = 0, r32f) writeonly uniform image3D volumeData;

/// Vertices of a [<0,0,0>, <1,1,1>] cube
const vec3 cubeCorners[] = {
	vec3(0.f, 0.f, 0.f),
	vec3(1.f, 0.f, 0.f),
	vec3(0.f, 1.f, 0.f),
	vec3(1.f, 1.f, 0.f),
	vec3(0.f, 0.f, 1.f),
	vec3(1.f, 0.f, 1.f),
	vec3(0.f, 1.f, 1.f),
	vec3(1.f, 1.f, 1.f),
};

/// Local work group setup
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

float gradient(vec3 p, ivec3 i, ivec3 period)
{
	const vec3 grad = perlinTables.grads[perlinTables.perms[(perlinTables.perms[(perlinTables.perms[i.x % period.x] + i.y) % period.y] + i.z) % period.z]];
	return dot(p, grad);
}

float sampleNoise(vec3 p, ivec3 period)
{
	vec3 i	= floor(p);
	vec3 t	= fract(p);
	
	// Soft curve
	// @ref https://www.google.com/search?ei=tvSgXMDCGMvisAeL7bawAQ&q=x+*+x+*+%283+-+2+*+x%29&oq=x+*+x+*+%283+-+2+*+x%29&gs_l=psy-ab.3..0i13i30l2j0i22i30l8.4020.9555..9980...0.0..0.119.1704.14j5......0....1..gws-wiz.......0i71j35i39j0j0i67j0i22i10i30.e3qAa8TpAUc
	vec3 w	= t * t * (3.f - 2.f * t);

	return mix(
		mix(
			mix(
				gradient(t - cubeCorners[0], ivec3(i + cubeCorners[0]), period),
				gradient(t - cubeCorners[1], ivec3(i + cubeCorners[1]), period),
				w.x
			),
			mix(
				gradient(t - cubeCorners[2], ivec3(i + cubeCorners[2]), period),
				gradient(t - cubeCorners[3], ivec3(i + cubeCorners[3]), period),
				w.x
			),
			w.y
		),
		mix(
			mix(
				gradient(t - cubeCorners[4], ivec3(i + cubeCorners[4]), period),
				gradient(t - cubeCorners[5], ivec3(i + cubeCorners[5]), period),
				w.x
			),
			mix(
				gradient(t - cubeCorners[6], ivec3(i + cubeCorners[6]), period),
				gradient(t - cubeCorners[7], ivec3(i + cubeCorners[7]), period),
				w.x
			),
			w.y
		),
		w.z
	);
}

float octaves(vec3 p, int numOctaves, ivec3 period)
{
	float f = 1.f;
	float s = 0.5f;
	float v = 0.f;

	for (int i = 0; i < numOctaves; ++i, f *= 2.f, s *= 0.5f)
		v += sampleNoise(p * f, period) * s;
	
	return v;
}

float monoOctaves(vec3 p, int numOctaves, ivec3 period)
{
	float f = 1.f;
	float s = 1.f;
	ivec3 r = period;

	float v = 0.f;

	for (int i = 0; i < numOctaves; ++i, f *= 2.f, s *= 0.5f, period *= 2)
		v += max(sampleNoise(p * f, period) * s, 0.f);
	
	return v;
}

/* float sampleVolume(vec3 traceStart, vec3 traceEnd, float samplingStep)
{
	const vec3 ray	= traceEnd - traceStart;
	const vec3 dir	= normalize(ray);
	const float len	= min(length(ray), 2.f);

	float val = 0.f;
	float s = 1.f;

	for (float t = 0.f; t < len; t += samplingStep, s *= 0.6f)
	{
		const vec3 p = traceStart + t * dir;
		val += monoOctaves(p, 4) * s;
	}

	return val;
} */

void main()
{
	/// Current position
	/* vec3 p = vec3(gl_GlobalInvocationID) / 128.f + vec3(0.f, 0.f, time / 3.f);

	mat4 invProjMatrix = inverse(viewMatrix);
	vec2 clipCoords = vec2(gl_GlobalInvocationID.xy * 2) / vec2(1280.f, 720.f) - 1.f;
	vec4 nearPlane	= (invProjMatrix * vec4(clipCoords, -1.f, 1.f));
	vec4 farPlane	= (invProjMatrix * vec4(clipCoords, 1.f, 1.f));
	vec3 traceStart	= nearPlane.xyz / nearPlane.w;
	vec3 traceEnd	= farPlane.xyz / farPlane.w;

	/// Compute noise value
	const float val = sampleVolume(traceStart, traceEnd, 0.4f);
	imageStore(testTex, ivec2(gl_GlobalInvocationID.xy), vec4(val)); */

	const vec3 p = vec3(gl_GlobalInvocationID) / 128.f;
	const float val = monoOctaves(p, 8, ivec3(2));
	imageStore(volumeData, ivec3(gl_GlobalInvocationID), vec4(val));
}