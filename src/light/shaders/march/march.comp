#version 450 core

struct Vertex
{
	// Vertex position
	vec3 pos;

	// Vertex normal
	vec3 norm;
};

/// Block size
uniform float blockSize = 1.f;

/// Block resolution
uniform int blockResolution = 32;

/// A vertex buffer
layout(binding = 0, std430) buffer VertexBuffer
{
	/// Currently writeable buffer index
	uint index;

	/// Chunk origin
	vec3 origin;

	/// Array of geometry vertices
	Vertex vertices[];
} chunk;

/// Marching vertices buffer
layout(binding = 1, std430) buffer MarchingTable
{
	int edgesTable[256 * 15];
};
//layout(binding = 0) uniform isampler2D edgesTable;

/// Buffers used to read density values
//layout(binding = 0, r32f) readonly uniform image3D densityBuffer;
layout(binding = 0) uniform sampler3D densityMap;

/// Cube origin
uniform vec3 origin;

/// Vertices of a [<0,0,0>, <1,1,1>] cube
const ivec3 cubeCorners[] = {
	ivec3(0, 0, 0),
	ivec3(0, 1, 0),
	ivec3(1, 1, 0),
	ivec3(1, 0, 0),
	ivec3(0, 0, 1),
	ivec3(0, 1, 1),
	ivec3(1, 1, 1),
	ivec3(1, 0, 1),
};

/// Generate geometry for voxel
void march(ivec3 voxelIndex)
{
	// Voxel offset position, [0.f - 31.f]
	const vec3 voxelOffset = vec3(voxelIndex);

	// Read density values
	float densities[8];
	for (uint i = 0; i < 8; ++i)
		densities[i] = texelFetch(densityMap, (voxelIndex + 2) + cubeCorners[i], 0).r;

	// Compute marching case
	uint marchingCase
		= (uint(densities[0] > 0.f) << 0)
		| (uint(densities[1] > 0.f) << 1)
		| (uint(densities[2] > 0.f) << 2)
		| (uint(densities[3] > 0.f) << 3)
		| (uint(densities[4] > 0.f) << 4)
		| (uint(densities[5] > 0.f) << 5)
		| (uint(densities[6] > 0.f) << 6)
		| (uint(densities[7] > 0.f) << 7);

	// No geometry here
	if (marchingCase == 0x0 || marchingCase == 0xff) return;

	// Pre-compute edge vertices
	vec3 vertPerEdge[12] = {
		voxelOffset + mix(cubeCorners[0], cubeCorners[1], (-densities[0]) / (densities[1] - densities[0])),
		voxelOffset + mix(cubeCorners[1], cubeCorners[2], (-densities[1]) / (densities[2] - densities[1])),
		voxelOffset + mix(cubeCorners[2], cubeCorners[3], (-densities[2]) / (densities[3] - densities[2])),
		voxelOffset + mix(cubeCorners[3], cubeCorners[0], (-densities[3]) / (densities[0] - densities[3])),
	
		voxelOffset + mix(cubeCorners[4], cubeCorners[5], (-densities[4]) / (densities[5] - densities[4])),
		voxelOffset + mix(cubeCorners[5], cubeCorners[6], (-densities[5]) / (densities[6] - densities[5])),
		voxelOffset + mix(cubeCorners[6], cubeCorners[7], (-densities[6]) / (densities[7] - densities[6])),
		voxelOffset + mix(cubeCorners[7], cubeCorners[4], (-densities[7]) / (densities[4] - densities[7])),

		voxelOffset + mix(cubeCorners[0], cubeCorners[4], (-densities[0]) / (densities[4] - densities[0])),
		voxelOffset + mix(cubeCorners[1], cubeCorners[5], (-densities[1]) / (densities[5] - densities[1])),
		voxelOffset + mix(cubeCorners[2], cubeCorners[6], (-densities[2]) / (densities[6] - densities[2])),
		voxelOffset + mix(cubeCorners[3], cubeCorners[7], (-densities[3]) / (densities[7] - densities[3])),
	};

	// Connect edges, generate triangles
	for (uint i = 0; i < 15; i += 3)
	{
		const uint j = marchingCase * 15 + i;
		const ivec3 edges = ivec3(edgesTable[j], edgesTable[j + 1], edgesTable[j + 2]);
		if (edges[0] < 0) return;

		vec3 verts[3];

		const uint vertexIndex = atomicAdd(chunk.index, 3);
		for (uint j = 0; j < 3; ++j)
		{
			//const float volumeRes = float(blockResolution + 4);
			//const float d = 1.f / volumeRes;
			const vec3 vert = vertPerEdge[edges[j]];
			const vec3 pos = vert / (blockResolution / blockSize);
			//const vec3 uvw = (vert + 2.f) / volumeRes;
			/* const vec3 norm = normalize(vec3(
				texture(densityMap, uvw + vec3(  d, 0.f, 0.f)).r - texture(densityMap, uvw - vec3(  d, 0.f, 0.f)).r,
				texture(densityMap, uvw + vec3(0.f,   d, 0.f)).r - texture(densityMap, uvw - vec3(0.f,   d, 0.f)).r,
				texture(densityMap, uvw + vec3(0.f, 0.f,   d)).r - texture(densityMap, uvw - vec3(0.f, 0.f,   d)).r
			)); */

			//chunk.vertices[vertexIndex + j] = Vertex(origin + pos, -norm);
			verts[j] = pos;
		}

		const vec3 d0 = normalize(verts[1] - verts[0]);
		const vec3 d1 = normalize(verts[2] - verts[0]);
		const vec3 norm = normalize(cross(d0, d1));

		chunk.vertices[vertexIndex + 0] = Vertex(origin + verts[0], norm);
		chunk.vertices[vertexIndex + 1] = Vertex(origin + verts[1], norm);
		chunk.vertices[vertexIndex + 2] = Vertex(origin + verts[2], norm);
	};
}

layout(local_size_x = 32, local_size_y = 1, local_size_z = 32) in;
void main()
{
	const ivec3 voxelIndex = ivec3(gl_GlobalInvocationID);
	if (voxelIndex.x < blockResolution && voxelIndex.z < blockResolution)
		march(voxelIndex);
}